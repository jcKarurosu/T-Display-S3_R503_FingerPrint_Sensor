"""
Base program to work with R503 Fingerprint sensor
With this program you can:
    - Add new fingerprint to memory
    - Delete current fingerprint from memory
    - Read fingerprints and search for them in the memory
    - Set different actions on the 'AURA' LED

Board: T-Display S3
    Screen resolution: 320 x 170
    Using the 16x16 font size we have 10 rows and 20 characteres on each row
    The MICROPYTHON FIRMWARE USED: https://github.com/russhughes/s3lcd/tree/main
    Thanks to 'russhughes'
    Pin connections
        GPIO16: Future use (Sensor Finger Detection Signal)
        GPIO43: UART TX
        GPIO44: UART RX

Fingerprint sensor: GROW R503

Made by: jcKarurosu
If you find this software useful or interesting please support me :)
https://github.com/jcKarurosu

Copyright (c) 2025 jcKarurosu

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

"""
import utime
from machine import Pin, SPI, UART
import vga1_16x16 as small_font # Included in the firmware from s3lcd git
import tft_config
import tft_buttons
import s3lcd                # Included in the firmware from s3lcd git
import jcLibs.r503_sensor

row_offset = 5
row_base = 16
ROW_0 = (row_base * 0) + row_offset
ROW_1 = (row_base * 1) + row_offset
ROW_2 = (row_base * 2) + row_offset
ROW_3 = (row_base * 3) + row_offset
ROW_4 = (row_base * 4) + row_offset
ROW_5 = (row_base * 5) + row_offset
ROW_6 = (row_base * 6) + row_offset
ROW_7 = (row_base * 7) + row_offset
ROW_8 = (row_base * 8) + row_offset
ROW_9 = (row_base * 9) + row_offset
#
bg_row = [255, 0, 0, 0, 0, 0]
screen_menu = [0, 1, 2, 3, 4, 5, 6]
menu_row_1 = [" Set security level ", " Set security level ", " Enroll finprint    ", " Read finprint      ", " Delete finprint    ", " Aura control       ", " Read index table   "]
menu_row_2 = [" Enroll finprint    ", "  Current:          ", "                    ", "                    ", "                    ", "  Select an operatin", "                    "]
menu_row_3 = [" Read finprint      ", "  Enter new (1-5)   ", "  Read 1 of 5       ", "  Place a finger    ", "  Last finger record", "  mode (1 - 6):     ", "  There are valid   "]
menu_row_4 = [" Delete finprint    ", "   -> 1             ", "  Place finger...   ", "  Finger founded!   ", "  has been deleted  ", "                    ", "  finger records in "]
menu_row_5 = [" Aura control       ", "  Set succesfully   ", "  Quit finger       ", "  Not a valid finger", "                    ", "   6:Gradually Off  ", "                    "]
menu_row_6 = [" Read index table   ", "                    ", "  Enroll completed  ", "                    ", "                    ", "                    ", "                    "]
empty_row = "                    "
x = 1
HIGHLIGHTED_LINE = 255
work_done = 0

led_mode = 3    # 0x1-Breathing, 0x2-Flashing, 0x3-AlwaysOn, 0x4-AlwaysOff, 0x5-GraduallyOn, 0x6-GraduallyOff
led_speed = 0   # Speed (1 byte): 0x00 - 0xFF, 256 gears, minimum 5s cycle
led_color = 1   # ColorIndex (1 byte): 1-Red, 2-Blue, 3-Purple, 4-Green, 5-Yellow, 6-Cyan, 7-White, 8-255-Off
led_times = 0   # Times (1 byte): 0-Infinte, 1-255, only in breathing and flashing modes
aura_ctrl_param = 1

buttons = tft_buttons.Buttons()
tft = tft_config.config(tft_config.WIDE_INVERTED)    #Create object and set screen position (rotation) as horizontal

# -- Hardware configuration ------------------------------------------------------
sensor_uart = UART(1, baudrate=57600, tx=Pin(43), rx=Pin(44), timeout=7)  #Serial port setup
fps_finger_detected = Pin(16, Pin.IN)   # WakeUp Pin generated by the R503 sensor, LOW active
utime.sleep_ms(300)    #R503 Sensor needs 0.2 sec to start up

#Create sensor object
try:
    sensor_huellas = jcLibs.r503_sensor.jc_Fingerprint(sensor_uart)
except RuntimeError:
    print("R503 sensor couldn't be initialized ... ")
    while True:
        #led.toggle()
        utime.sleep(0.5)

class Button:
    """
    Debounced pin handler

    Copied from https://github.com/russhughes/st7789s3_mpy/blob/main/examples/clock/clock.py
    """
    def __init__(self, pin, callback, trigger=Pin.IRQ_FALLING, debounce=350):
        self.callback = callback
        self.debounce = debounce
        self._next_call = utime.ticks_ms() + self.debounce
        pin.irq(trigger=trigger, handler=self.debounce_handler)

    def call_callback(self, pin):
        self.callback(pin)

    def debounce_handler(self, pin):
        if utime.ticks_ms() > self._next_call:
            self._next_call = utime.ticks_ms() + self.debounce
            self.call_callback(pin)

def select_pressed(pin):
    """
    This button is used to navigate or change the options in the menus displayed on screen
    """
    global bg_row
    global x
    
    if (screen_menu[0] == 0):   # Main menu
        bg_row = [bg_row[-1]] + bg_row[:-1]
    elif (screen_menu[0] == 1): # Set security level
        x = (x+1) if x < 5 else 1
    elif (screen_menu[0] == 5): # AURA Ctrl
        if aura_ctrl_param == 1:
            x = (x+1) if x < 6 else 1
        elif aura_ctrl_param == 3:
            x = (x+1) if x < 8 else 1
        else:    # For menus: AURA speed and times of flashing/breathing
            x = (x+1) if x < 5 else 1
    else:
        pass

def action_pressed(pin):
    """
    This button is used to confirm an action, the action to be executed is related to the
    current menu on screen
    """
    global screen_menu
    global x
    global work_done
    global bg_row
    global aura_ctrl_param
    global led_mode
    global led_speed
    global led_color
    global led_times
    
    if (screen_menu[0] == 0):
        for k in range(bg_row.index(255)+1):
            screen_menu = screen_menu[1:] + [screen_menu[0]]
        x = 1
    elif (screen_menu[0] == 1): #Set security level menu
        work_done = 1
    elif (screen_menu[0] == 5): # Aura Control
        if aura_ctrl_param == 1:    # mode
            led_mode = x
        elif aura_ctrl_param == 2:  # speed
            led_speed = x * 51
        elif aura_ctrl_param == 3:  # color
            led_color = x
        elif aura_ctrl_param == 4:  # times
            led_times = x
        aura_ctrl_param = (aura_ctrl_param + 1) if aura_ctrl_param < 5 else 1
        x = 1
    else:
        pass

def set_main_menu():
    global screen_menu
    global work_done
    screen_menu = [0, 1, 2, 3, 4, 5, 6]    # Back to main menu
    work_done = 0   #Clear flag
    utime.sleep(2)
    
def get_FingerPrint():
    """Get a fingerprint image, template it and see if it matches"""
    print("Waiting for image...")
    while sensor_huellas.generate_image() != jcLibs.r503_sensor.Command_OK:
        pass
    print("Templating...")
    if sensor_huellas.gen_char_from_image(1) != jcLibs.r503_sensor.Command_OK:
        return False
    print("Searching...")
    if sensor_huellas.search_finger_lib() != jcLibs.r503_sensor.Command_OK:
        return False
    return True

def enroll_FingerPrint(location, k):
    """Take 5 finger images and template it, then store them in 'location'"""
    n_img = 5
    tft.text(small_font, menu_row_1[k], 0, ROW_1, s3lcd.GREEN, 0)
    tft.text(small_font, empty_row, 0, ROW_2, s3lcd.GREEN, 0)
    tft.text(small_font, empty_row, 0, ROW_3, s3lcd.GREEN, 0)
    tft.text(small_font, empty_row, 0, ROW_4, s3lcd.GREEN, 0)
    tft.text(small_font, empty_row, 0, ROW_5, s3lcd.GREEN, 0)
    tft.text(small_font, empty_row, 0, ROW_6, s3lcd.GREEN, 0)
    tft.show()
    for fp_img in range(1,(n_img+1)):
        if fp_img == 1:
            print(f"Place finger on sensor, scanning finger 1 of {n_img} times", end="")
        else:
            print(f"Place same finger again, scanning finger {fp_img} of {n_img} times", end="")

        #Print on display S3
        tft.text(small_font, "  Read " + str(fp_img) + " of 5       ", 0, ROW_3, s3lcd.GREEN, 0)
        tft.text(small_font, menu_row_4[k], 0, ROW_4, s3lcd.GREEN, HIGHLIGHTED_LINE)
        tft.text(small_font, empty_row, 0, ROW_5, s3lcd.GREEN, 0)
        tft.text(small_font, empty_row, 0, ROW_6, s3lcd.GREEN, 0)
        tft.show()

        while True:
            i = sensor_huellas.generate_image()
            if i == jcLibs.r503_sensor.Command_OK:
                print("Image succesfully acquired.")
                break
            elif i == jcLibs.r503_sensor.NoFingerOnSensor:
                print(".", end="")
            elif i == jcLibs.r503_sensor.ImageFail:
                print("Error, image not acquired.")
                return False
            else:
                print("Something went wrong.")
                return False
        
        print("Templating...", end="")
        i = sensor_huellas.gen_char_from_image(fp_img)  #Argument = Buffer num (1 - 6)
        if i == jcLibs.r503_sensor.Command_OK:
            print("Succesfully templated.")
        else:
            if i == jcLibs.r503_sensor.FailGenerateCharFile:
                print("Over-disorderly fingerprint image.")
            elif i == jcLibs.r503_sensor.FailGenerateCharFile2:
                print("Lackness of character point or over-smallness of fingerprint image.")
            elif i == jcLibs.r503_sensor.FailGeneratingImg:
                print("Fail to generate image for the lackness of valid primary image.")
            else:
                print("Another error ocurred while templating.")
            return False

        if fp_img < n_img:
            print("Please remove your finger.")
            #Print on display S3
            #tft.text(small_font, "  Read " + str(fp_img) + " of 5       ", 0, ROW_3, s3lcd.GREEN, 0)
            tft.text(small_font, empty_row, 0, ROW_4, s3lcd.GREEN, 0)
            tft.text(small_font, menu_row_5[k], 0, ROW_5, s3lcd.GREEN, HIGHLIGHTED_LINE)
            #tft.text(small_font, empty_row, 0, ROW_6, s3lcd.GREEN, 0)
            tft.show()
            utime.sleep(1)
            while i != jcLibs.r503_sensor.NoFingerOnSensor:
                i = sensor_huellas.generate_image()

    print("Creating model...", end="")
    i = sensor_huellas.generate_template()
    if i == jcLibs.r503_sensor.Command_OK:
        print("Model created succesfully.")
    else:
        if i == jcLibs.r503_sensor.FailCombineCharFiles:
            print("Prints did not match.")
        else:
            print("Other error ocurred.")
        return False

    print("Storing model #%d..." % location, end = "")
    i = sensor_huellas.store_template(location)
    if i == jcLibs.r503_sensor.Command_OK:
        print("Model stored succesfully.")
        #Print on display S3
        tft.text(small_font, empty_row, 0, ROW_3, s3lcd.GREEN, 0)
        tft.text(small_font, empty_row, 0, ROW_4, s3lcd.GREEN, 0)
        tft.text(small_font, empty_row, 0, ROW_5, s3lcd.GREEN, 0)
        tft.text(small_font, menu_row_6[k], 0, ROW_6, s3lcd.GREEN, HIGHLIGHTED_LINE)
        tft.show()
    else:
        tft.text(small_font, empty_row, 0, ROW_3, s3lcd.GREEN, 0)
        tft.text(small_font, empty_row, 0, ROW_4, s3lcd.GREEN, 0)
        tft.text(small_font, empty_row, 0, ROW_5, s3lcd.GREEN, 0)
        if i == jcLibs.r503_sensor.PageIDBadLocation:
            print("Bad storage location.")
            tft.text(small_font, "Bad storage location", 0, ROW_6, s3lcd.GREEN, HIGHLIGHTED_LINE)
        elif i == jcLibs.r503_sensor.ErrorWritingFlash:
            print("Flash storage error.")
            tft.text(small_font, "Flash storage error ", 0, ROW_6, s3lcd.GREEN, HIGHLIGHTED_LINE)
        else:
            print("Other error ocurred.")
            tft.text(small_font, "Other error ocurred ", 0, ROW_6, s3lcd.GREEN, HIGHLIGHTED_LINE)
        tft.show()
        return False

    return True

def main():
    global screen_menu
    global work_done
    global aura_ctrl_param

    #initialize the location index to know how many fingerprints are stored in the sensor memory
    if sensor_huellas.read_templates() == jcLibs.r503_sensor.Command_OK:
        if not sensor_huellas.templates:
            location_index = 1
        else:
            location_index = max(sensor_huellas.templates) + 1
    
    sensor_huellas.led_ctrl(1, 128, 2, 2)   #Aura is turned ON 2 times using breathing mode to advice user the system has started
    b_dummy = 0
    i = 0
    
    try:
        tft.init()
        tft.fill(s3lcd.BLACK)   # Fill screen with Black color
        
        Button(pin=buttons.left, callback = action_pressed)
        Button(pin=buttons.right, callback = select_pressed)
        
        while 1:
            i = screen_menu[0]
            if (i == 0):    #Displays main menu
                if sensor_huellas.read_templates() != jcLibs.r503_sensor.Command_OK:
                    raise RuntimeError("Failed to read templates")
                tft.text(small_font, menu_row_1[i], 0, ROW_1, s3lcd.GREEN, bg_row[0])
                tft.text(small_font, menu_row_2[i], 0, ROW_2, s3lcd.GREEN, bg_row[1])
                tft.text(small_font, menu_row_3[i], 0, ROW_3, s3lcd.GREEN, bg_row[2])
                tft.text(small_font, menu_row_4[i], 0, ROW_4, s3lcd.GREEN, bg_row[3])
                tft.text(small_font, menu_row_5[i], 0, ROW_5, s3lcd.GREEN, bg_row[4])
                tft.text(small_font, menu_row_6[i], 0, ROW_6, s3lcd.GREEN, bg_row[5])
                tft.show()
            elif (i == 1):  #Menu: set security level
                tft.text(small_font, menu_row_1[i], 0, ROW_1, s3lcd.GREEN, 0)
                tft.text(small_font, "  Current: " + str(sensor_huellas.security_level) + "       ", 0, ROW_2, s3lcd.GREEN, 0)
                tft.text(small_font, menu_row_3[i], 0, ROW_3, s3lcd.GREEN, 0)
                if (work_done == 1):
                    if sensor_huellas.set_SysParam(5, x) == jcLibs.r503_sensor.Command_OK:
                        print("Security level -> ", end="")
                        print(sensor_huellas.security_level)
                        if sensor_huellas.security_level == x:
                            print("New security level set correctly!")
                            tft.text(small_font, "  -> " + str(x) + "              ", 0, ROW_4, s3lcd.GREEN, 0)
                            tft.text(small_font, menu_row_5[i], 0, ROW_5, s3lcd.GREEN, HIGHLIGHTED_LINE)
                            tft.text(small_font, empty_row, 0, ROW_6, s3lcd.GREEN, 0)
                        else:
                            print("Looks like something happened while trying to set new security level :/")
                            tft.text(small_font, "Something went wrong", 0, ROW_4, s3lcd.GREEN, 0)
                            tft.text(small_font, "while setting sec le", 0, ROW_5, s3lcd.GREEN, HIGHLIGHTED_LINE)
                            tft.text(small_font, empty_row, 0, ROW_6, s3lcd.GREEN, 0)
                        tft.show()
                        set_main_menu()
                    else:
                        print("Something went wrong while setting security level :/")
                        tft.text(small_font, "Something went wrong", 0, ROW_4, s3lcd.GREEN, 0)
                        tft.text(small_font, "while setting sec le", 0, ROW_5, s3lcd.GREEN, HIGHLIGHTED_LINE)
                        tft.text(small_font, empty_row, 0, ROW_6, s3lcd.GREEN, 0)
                        tft.show()
                        set_main_menu()
                else:
                    tft.text(small_font, "  -> " + str(x) + "              ", 0, ROW_4, s3lcd.GREEN, HIGHLIGHTED_LINE)
                    tft.text(small_font, empty_row, 0, ROW_5, s3lcd.GREEN, 0)
                    tft.text(small_font, empty_row, 0, ROW_6, s3lcd.GREEN, 0)
                    tft.show()
            elif (i == 2):  #Menu: Enroll fingerprint
                sensor_huellas.led_ctrl(1, 128, 5, 1)   #Aura: yellow breathing
                sensor_huellas.led_ctrl(3, 1, 5, 1)
                enroll_FingerPrint(location_index, i)
                location_index += 1
                sensor_huellas.led_ctrl(6, 128, 5, 1)   #Aura: Gradually Off
                set_main_menu()
            elif (i == 3):  #Menu: Read fingerprint
                tft.text(small_font, menu_row_1[i], 0, ROW_1, s3lcd.GREEN, 0)
                tft.text(small_font, empty_row, 0, ROW_2, s3lcd.GREEN, 0)
                tft.text(small_font, menu_row_3[i], 0, ROW_3, s3lcd.GREEN, HIGHLIGHTED_LINE)
                tft.text(small_font, empty_row, 0, ROW_4, s3lcd.GREEN, 0)
                tft.text(small_font, empty_row, 0, ROW_5, s3lcd.GREEN, 0)
                tft.text(small_font, empty_row, 0, ROW_6, s3lcd.GREEN, 0)
                tft.show()
                    #
                if get_FingerPrint():
                    sensor_huellas.led_ctrl(2, 128, 4, 2)   #Aura: Green, 2 times flashing
                    print("Detected #", sensor_huellas.finger_ID, "with confidence ", sensor_huellas.confidence)
                    # --
                    tft.text(small_font, empty_row, 0, ROW_3, s3lcd.GREEN, 0)
                    tft.text(small_font, menu_row_4[i], 0, ROW_4, s3lcd.GREEN, HIGHLIGHTED_LINE)
                    tft.text(small_font, empty_row, 0, ROW_5, s3lcd.GREEN, 0)
                    tft.text(small_font, empty_row, 0, ROW_6, s3lcd.GREEN, 0)
                    tft.show()  #<<<<<<<<<
                    set_main_menu()
                else:
                    sensor_huellas.led_ctrl(3, 1, 1, 1) #Aura: Red Always On
                    print("Finger not found")
                    utime.sleep(1)
                    sensor_huellas.led_ctrl(4, 1, 1, 1) #Aura: Always Off
                    # --
                    tft.text(small_font, empty_row, 0, ROW_3, s3lcd.GREEN, 0)
                    tft.text(small_font, empty_row, 0, ROW_4, s3lcd.GREEN, 0)
                    tft.text(small_font, menu_row_5[i], 0, ROW_5, s3lcd.GREEN, 0)   #Finger NOT valid
                    tft.text(small_font, empty_row, 0, ROW_6, s3lcd.GREEN, 0)
                    tft.show()  #<<<<<<<<<
                    set_main_menu()
            elif (i == 4):  #Menu: Delete fingerprint
                tft.text(small_font, menu_row_1[i], 0, ROW_1, s3lcd.GREEN, 0)
                tft.text(small_font, menu_row_2[i], 0, ROW_2, s3lcd.GREEN, 0)
                if location_index > 1:
                    location_index -= 1
                    if sensor_huellas.delete_template(location_index) == jcLibs.r503_sensor.Command_OK:
                        print("Deleted!")
                        tft.text(small_font, menu_row_3[i], 0, ROW_3, s3lcd.GREEN, 0)
                        tft.text(small_font, menu_row_4[i], 0, ROW_4, s3lcd.GREEN, 0)
                    else:
                        tft.text(small_font, "Failed to delete :( ", 0, ROW_3, s3lcd.GREEN, 0)
                        tft.text(small_font, menu_row_4[i], 0, ROW_4, s3lcd.GREEN, 0)
                        print("Failed to delete :( ")
                else:
                    tft.text(small_font, "There is no print to", 0, ROW_3, s3lcd.GREEN, 0)
                    tft.text(small_font, "delete (index = 1)  ", 0, ROW_4, s3lcd.GREEN, 0)
                    print("There is no print to delete (index = 1)")
                tft.text(small_font, menu_row_5[i], 0, ROW_5, s3lcd.GREEN, 0)
                tft.text(small_font, menu_row_6[i], 0, ROW_6, s3lcd.GREEN, 0)
                tft.show()  #<<<<<<<<<
                set_main_menu()
            elif (i == 5):  #Menu: Aura control
                tft.text(small_font, menu_row_1[i], 0, ROW_1, s3lcd.GREEN, 0)
                tft.text(small_font, empty_row, 0, ROW_3, s3lcd.GREEN, 0)
                if aura_ctrl_param == 1:
                    tft.text(small_font, "  Select AURA mode: ", 0, ROW_2, s3lcd.GREEN, 0)
                    if x == 1:
                        tft.text(small_font, "  1 - Breathing    ", 0, ROW_4, s3lcd.GREEN, 0)
                    elif x == 2:
                        tft.text(small_font, "  2 - Flashing     ", 0, ROW_4, s3lcd.GREEN, 0)
                    elif x == 3:
                        tft.text(small_font, "  3 - Always ON    ", 0, ROW_4, s3lcd.GREEN, 0)
                    elif x == 4:
                        tft.text(small_font, "  4 - Always OFF   ", 0, ROW_4, s3lcd.GREEN, 0)
                    elif x == 5:
                        tft.text(small_font, "  5 - Gradually ON ", 0, ROW_4, s3lcd.GREEN, 0)
                    elif x == 6:
                        tft.text(small_font, "  6 - Gradually OFF", 0, ROW_4, s3lcd.GREEN, 0)
                elif aura_ctrl_param == 2:
                    tft.text(small_font, "  Select AURA speed:", 0, ROW_2, s3lcd.GREEN, 0)
                    tft.text(small_font, "  Speed 1 to 5 : " + str(x) + "  ", 0, ROW_4, s3lcd.GREEN, 0)
                elif aura_ctrl_param == 3:
                    tft.text(small_font, "  Select AURA color:", 0, ROW_2, s3lcd.GREEN, 0)
                    if x == 1:
                        tft.text(small_font, "  1 - Red          ", 0, ROW_4, s3lcd.GREEN, 0)
                    elif x == 2:
                        tft.text(small_font, "  2 - Blue         ", 0, ROW_4, s3lcd.GREEN, 0)
                    elif x == 3:
                        tft.text(small_font, "  3 - Purple       ", 0, ROW_4, s3lcd.GREEN, 0)
                    elif x == 4:
                        tft.text(small_font, "  4 - Green        ", 0, ROW_4, s3lcd.GREEN, 0)
                    elif x == 5:
                        tft.text(small_font, "  5 - Yellow       ", 0, ROW_4, s3lcd.GREEN, 0)
                    elif x == 6:
                        tft.text(small_font, "  6 - Cyan         ", 0, ROW_4, s3lcd.GREEN, 0)
                    elif x == 7:
                        tft.text(small_font, "  7 - White        ", 0, ROW_4, s3lcd.GREEN, 0)
                    else:
                        tft.text(small_font, "  8 - OFF          ", 0, ROW_4, s3lcd.GREEN, 0)
                elif aura_ctrl_param == 4:
                    tft.text(small_font, "  Select flash times", 0, ROW_2, s3lcd.GREEN, 0)
                    tft.text(small_font, "  1 to 5 : " + str(x) + "        ", 0, ROW_4, s3lcd.GREEN, 0)
                else:
                    tft.text(small_font, empty_row, 0, ROW_2, s3lcd.GREEN, 0)
                    if sensor_huellas.led_ctrl(led_mode, led_speed, led_color, led_times) != jcLibs.r503_sensor.Command_OK:
                        print("Error in aura control command... ")
                        tft.text(small_font, "  Error in AURA ctrl", 0, ROW_4, s3lcd.GREEN, 0)
                    else:
                        tft.text(small_font, "  AURA working!     ", 0, ROW_4, s3lcd.GREEN, 0)
                tft.text(small_font, empty_row, 0, ROW_5, s3lcd.GREEN, 0)
                tft.text(small_font, empty_row, 0, ROW_6, s3lcd.GREEN, 0)
                tft.show()  #<<<<<<<<<
                if aura_ctrl_param == 5:
                    utime.sleep(2)
                    set_main_menu()
                    aura_ctrl_param = 1
            elif (i == 6):  #Menu: Read Index Table
                tft.text(small_font, menu_row_1[i], 0, ROW_1, s3lcd.GREEN, 0)
                tft.text(small_font, menu_row_2[i], 0, ROW_2, s3lcd.GREEN, 0)
                #Read fingerprint template index table (0x1F)
                if sensor_huellas.read_templates() == jcLibs.r503_sensor.Command_OK:
                    if not sensor_huellas.templates:
                        print("Template Library is empty")
                        location_index = 1
                        tft.text(small_font, "Template Library    ", 0, ROW_3, s3lcd.GREEN, 0)
                        tft.text(small_font, "is empty            ", 0, ROW_4, s3lcd.GREEN, 0)
                    else:
                        print("Valid templates are stored in next positions: ")
                        print(sensor_huellas.templates)
                        location_index = max(sensor_huellas.templates) + 1
                        tft.text(small_font, "Valid templates are:", 0, ROW_3, s3lcd.GREEN, 0)
                        temp = str(sensor_huellas.templates[:20]) + "                    "
                        tft.text(small_font, temp[:20], 0, ROW_4, s3lcd.GREEN, 0)
                    print(f"Location_index value updated to: {location_index}")
                else:
                    print("Error while reading fingerprint templates index table")
                    tft.text(small_font, "Error while reading ", 0, ROW_3, s3lcd.GREEN, 0)
                    tft.text(small_font, "finprint index table", 0, ROW_4, s3lcd.GREEN, 0)
                tft.text(small_font, menu_row_5[i], 0, ROW_5, s3lcd.GREEN, 0)
                tft.text(small_font, menu_row_6[i], 0, ROW_6, s3lcd.GREEN, 0)
                tft.show()  #<<<<<<<<<
                set_main_menu()
            else:
                pass

    finally:
        tft_config.deinit(tft)

main()
